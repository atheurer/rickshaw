#!/bin/bash
set -u

# vim: autoindent tabstop=4 shiftwidth=4 expandtab softtabstop=4 filetype=bash

# This script implements the 'remotehost' endpoint for rickshaw.  It runs 1 or more
# clients and servers for as many benchmark interations/samples as required
# for a single invocation of rickshaw.
# 
#
# Usage: (as called by rickshaw-run)
#
# remotehost
# [--validate]
# --endpoint-label
# --run-id
# --base-run-dir
# --image
# --roadblock-server
# --roadblock-id
# --roadblock-passwd
# --endpoint-opts=client:n-m,o-p,server:n-m,o-p,host:<remote-host>,userenv:<distro>
#
# Note: When specifying a remotehost endpoint on an invocation of rickshaw-run
# (or crucible run <benchmark>) the following format is used:
#
# --endpoint remotehost,client:<range>,server:<range>,host:<remote-hostname>
#
# and the remaining options are handled by rickshaw-run
#
# If --validate is used all options after client/server will be ignored

this_endpoint_dir=$(dirname `readlink -e $0` | sed -e 'sX/binXX')
endpoint_base_dir=$(cd $this_endpoint_dir >/dev/null && cd .. && /bin/pwd)
if [ -e "$endpoint_base_dir/base" ]; then
    . "$endpoint_base_dir/base"
else
    echo "Could not find endpoint source file "$endpoint_base_dir/base", exiting"
    exit 1
    exit
fi

endpoint_name="remotehost"
osruntime="chroot"
userenv="rhubi8"
user="root"
ssh_opts="-o StrictHostKeyChecking=no -o PasswordAuthentication=no"

function do_ssh() {
    local user_host user host ssh_cmd
    user_host=$1; shift
    user=`echo $user_host | awk -F@ '{print $1}'`
    host=`echo $user_host | awk -F@ '{print $2}'`
    ssh_cmd=""
    if [ -z "$user" ]; then
        exit_error "do_ssh: user was blank: $user_host"
    fi
    if [ -z "$host" ]; then
        exit_error "do_ssh: host was blank: $user_host"
    fi
    if [ "$user" != "root" ]; then
        ssh_cmd="ssh $ssh_opts $user_host sudo bash -c \"$@\""
    else
        ssh_cmd="ssh $ssh_opts $user_host $@"
    fi
    $ssh_cmd
    local rc=$?
    return $rc
}

function do_scp() {
    # The following allows for using a non-root user>
    # If a non-root user is used, that user must have root-priv
    # no password prompt required.
    local src dst dst_sudo_cmd dst_path dst_user_host dst_user dst_cmd
    local src_sudo_cmd src_path src_user_host src_user src_sudo_cmd src_cmd
    src=$1; shift # [<user>@<host>:]<source> source can be a dir or file
                        # If a dir, the full dir is used when copied to the destination
    dst=$1; shift # [<user>@<host>:]<destination> destination should be a dir, not a file

    if echo $dst | grep -q -- "@"; then
        dst_sudo_cmd=""
        dst_path=`echo $dst | awk -F: '{print $2}'`
        dst_user_host=`echo $dst | awk -F: '{print $1}'`
        dst_user=`echo $dst_user_host | awk -F@ '{print $1}'`
        if [ "$dst_user" != "root" ]; then
            local dst_sudo_cmd="sudo"
        fi
        dst_cmd="ssh $ssh_opts $dst_user_host $dst_sudo_cmd tar -C $dst_path -xf -"
    else
        dst_cmd="tar -C $dst -xf -"
    fi

    if echo $src | grep -q -- "@"; then
        src_sudo_cmd=""
        src_path=`echo $src | awk -F: '{print $2}'`
        src_user_host=`echo $src | awk -F: '{print $1}'`
        src_user=`echo $src_user_host | awk -F@ '{print $1}'`
        if [ "$src_user" != "root" ]; then
            src_sudo_cmd="sudo"
        fi
        src_cmd="ssh $ssh_opts $src_user_host $src_sudo_cmd tar -cf - $src_path"
    else
        src_cmd="tar -cf - $src"
    fi

    $src_cmd | $dst_cmd
}

function cleanup_osruntime() {
    local container_name
    echo "Doing cleanup"
    container_name="${endpoint_label}_$run_id"
    if [ "$osruntime" == "chroot" ]; then
        echo "Removing container $container_name for chroot runtime"
        do_ssh $user@$host podman rm "$container_name"
    fi
}

function process_remotehost_opts() {
    local endpoint_opts this_opt arg val
    endpoint_opts="$1"
    for this_opt in `echo $endpoint_opts | sed -e 's/,/ /g'`; do
        arg=`echo $this_opt | awk -F: '{print $1}'`
        val=`echo $this_opt | awk -F: '{print $2}'`
        case "$arg" in
            client|server|clients|servers)
                addto_clients_servers "$arg" "$val"
                ;;
            osruntime)
                case "$val" in
                    builtin|chroot|podman)
                        osruntime=$val
                        ;;
                    *)
                        exit_error "osruntime $val not supported"
                        ;;
                esac
                ;;
            userenv)
                userenv=$val
                ;;
            host)
                host=$val
                ;;
            user)
                user=$val
                ;;
            *)
                if echo $arg | grep -q -- "="; then
                    echo "You can't use a \"=\" for assignment in endpoint options"
                    echo "You must use \":\", like `echo $arg | sed -e 's/=/:/'`"
                fi
                exit_error "remotehost endpoint option [$arg] not supported"
                ;;
        esac
    done
    if [ "$do_validate" != "1" ]; then 
        remote_logs_dir="/var/lib/crucible/$endpoint_label-logs_$run_id"
    fi
}

function remotehost_req_check() {
    do_ssh $user@$host uptime >/dev/null || exit_error "Could not ssh to $host"
    do_ssh $user@$host podman --version >/dev/null 2>&1 ||\
        do_ssh $user@$host yum install -y podman >/dev/null 2>&1 ||\
        exit_error "Podman not installed and could not install it" 
    # Validation returns what clients and servers would be used and the userenv
    if [ "$do_validate" == 1 ]; then
        echo_clients_servers
        echo "userenv $userenv"
        exit
    fi
}

function launch_osruntime() {
    local this_cs_label this_cs_log_file base_cmd cd_cmd cs_rb_env
    local env_opts existing_container container_id container_mount container_name fs
    echo osruntime: $osruntime
    echo ensuring container image is pulled to $host
    do_ssh $user@$host podman pull $image
    container_name="${endpoint_label}_$run_id"
    existing_container=`do_ssh $user@$host podman ps -a --format "{{.Names}}" | grep ^$container_name$`
    if [ ! -z "$existing_container" ]; then
        echo "WARNING: found existing container '$existing_container', deleting"
        do_ssh $user@$host podman rm $container_name
    fi
    if [ "$osruntime" == "chroot" ]; then
        echo "Adding mount for chroot osruntime"
        container_id=`do_ssh $user@$host podman create --name $container_name $image`
        container_mount=`do_ssh $user@$host podman mount "$container_id"`
        if [ ! -z "$container_mount" ]; then
            echo "Container mount: $container_mount"
            echo "Adding host directories to container mount"
            for fs in dev proc sys; do
                echo "Adding $fs"
                do_ssh $user@$host mkdir -p $container_mount/$fs
                do_ssh $user@$host mount --verbose --options bind /$fs $container_mount/$fs
            done
            # for chroot osruntime we can also simply copy the ssh key
            echo "Copying ssh key to $user@$host:$container_mount/tmp/ for chroot runtime"
            pushd "$config_dir" >/dev/null
            do_scp "rickshaw_id.rsa" "$user@$host:$container_mount/tmp/"
            popd >/dev/null
            do_ssh $user@$host /bin/cp /etc/hosts $container_mount/etc/
            do_ssh $user@$host /bin/cp /etc/resolv.conf $container_mount/etc/
        else
            echo "Container mount not found, exiting"
            exit 1
        fi
    fi

    # For each client and server launch the actual script which will run it.
    do_ssh $user@$host /bin/mkdir -p $remote_logs_dir
    for this_cs_label in ${clients[@]} ${servers[@]}; do
        this_cs_log_file="$this_cs_label.txt"
        base_cmd="$client_server_run_script --rickshaw-host=$hostname"
        base_cmd+=" --endpoint-run-dir=$endpoint_run_dir --cs-label=$this_cs_label $cs_rb_opts"
        base_cmd+=" --base-run-dir=$base_run_dir"
        if [ "$osruntime" == "chroot" ]; then
            echo "using chroot"
            # Note that --endpoint-run value must be hard-coded to /endpoint-run becaue of chroot
            # Same will be true for running podman
            cs_cmd="nohup chroot $container_mount $base_cmd >$remote_logs_dir/$this_cs_log_file &"
            echo -e "About to run:\n$cs_cmd\n"
            do_ssh $user@$host "$cs_cmd"
        elif [ "$osruntime" == "podman"]; then
            echo doing podman runtime
            cs_rb_env=`echo "$cs_rb_opts" | sed -e 's/ --/,/g'`
            env_opts="--env rickshaw-host=localhost,endpoint-run-dir=$endpoint_run_dir"
            env_opts+=",cs-label=$this_cs_label,base-run-dir=$base_run_dir"
            env_opts+="$cs_rb_env"
            podman run -t $env_opts $image
        fi
    done
    echo "This endpiont deployed"
}

function move_remotehost_logs() {
    local this_cs_label remote_cs_log_file
    mkdir -p "$client_server_logs_dir"
    for this_cs_label in ${clients[@]} ${servers[@]}; do
        remote_cs_log_file="$remote_logs_dir/$this_cs_label.txt"
        pushd / >/dev/null
        do_scp "$user@$host:$remote_cs_log_file" / && \
        mv $remote_cs_log_file $client_server_logs_dir && \
        do_ssh $user@$host /bin/rm -r $remote_logs_dir
        popd >/dev/null
    done
}

process_opts $@
process_remotehost_opts $endpoint_opts
init_common_dirs
remotehost_req_check
base_req_check
launch_osruntime
process_prebench_roadblocks
process_bench_roadblocks
process_postbench_roadblocks
move_remotehost_logs
cleanup_osruntime
process_final_roadblocks
