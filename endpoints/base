#!/usr/bin/env bash
# -*- mode: sh; indent-tabs-mode: nil; sh-basic-offset: 4 -*-
# vim: autoindent tabstop=4 shiftwidth=4 expandtab softtabstop=4 filetype=bash
#set -u

# Shared init and functions for endpoints

echo "#params: $@"
host="" # the host the endpoint works with
controller_ipaddr=""
rb_exit_success=0
rb_exit_timeout=3
rb_exit_abort=4
rb_exit_input=2
default_timeout=240
max_rb_attempts=""
endpoint_deploy_timeout=360
postprocess_tools_timeout=600
client_server_script_start_timeout=720
endpoint_move_data_timeout=300
cs_rb_opts=""
do_validate="0"
num_clients=0
num_servers=0
abort=0
max_sample_failures=""
export ssh_opts="-q -o StrictHostKeyChecking=no -o PasswordAuthentication=no"
declare -A clients
declare -A servers

function abort_error() {
    local msg="$1"; shift
    local sync="$1"; shift
    echo "[ERROR]$msg"
    local msg_file=error.json
    echo '[{"recipient":{"type":"all","id":"all"},"user-object":{"error":"'$msg'"}}]' >$msg_file
    do_roadblock "$sync" "follower" "abort" "$msg_file"
    abort=1
}

function exit_error() {
    local msg="$1"; shift
    echo "[ERROR]$msg"
    exit 1
}

function process_opts() {
    local longopts="validate,endpoint-opts:,endpoint-label:,run-id:,base-run-dir:,image:"
    local longopts+=",roadblock-server:,roadblock-passwd:,roadblock-id:,osruntime:,max-sample-failures:"
    local longopts+=",max-rb-attempts:,endpoint-deploy-timeout:,client-server-script-start-timeout:"
    local opts=$(getopt -q -o "" --longoptions "$longopts" -n "getopt.sh" -- "$@");
    if [ $? -ne 0 ]; then
        exit_error "Unrecognized option specified" endpoint-deploy  
    fi
    eval set -- "$opts";
    while true; do
        case "$1" in
            --validate)
                do_validate="1"
                shift;
                ;;
            --endpoint-opts)
                shift;
                endpoint_opts="$1"
                shift;
                ;;
            --endpoint-label)
                shift;
                endpoint_label="$1"
                shift;
                ;;
            --run-id)
                shift;
                run_id="$1"
                shift;
                ;;
            --base-run-dir)
                shift;
                base_run_dir="$1"
                shift;
                ;;
            --image)
                shift;
                image="$1"
                shift;
                ;;
            --roadblock-passwd)
                shift;
                rb_passwd="$1"
                cs_rb_opts="$cs_rb_opts --roadblock-passwd=$rb_passwd"
                shift;
                ;;
            --roadblock-id)
                shift;
                rb_id="$1"
                cs_rb_opts="$cs_rb_opts --roadblock-id=$rb_id"
                shift;
                ;;
            --max-sample-failures)
                shift;
                max_sample_failures="$1"
                shift;
                ;;
            --max-rb-attempts)
                shift;
                max_rb_attempts="$1"
                shift;
                ;;
            --endpoint-deploy-timeout)
                shift;
                endpoint_deploy_timeout="$1"
                echo "setting endpoint_deploy_timeout to $endpoint_deploy_timeout"
                shift;
                ;;
            --client-server-script-start-timeout)
                shift;
                client_server_script_start_timeout="$1"
                echo "setting client_server_script_start_timeout to $client_server_script_start_timeout"
                shift;
                ;;
            --)
                shift;
                break;
            ;;
            *)
            exit_error "Unexpected argument [$1]" endpoint-deploy
            shift;
            break;
            ;;
        esac
    done
}
if [ -z "$max_sample_failures" ]; then
    max_sample_failures=3
    if [ "do_validate" == "0" ]; then
        echo "[WARNING] --max-sample-failures was not used, so setting to default of $max_sample_failures"
    fi
fi
if [ -z "$max_rb_attempts" ]; then
    max_rb_attempts=1
    if [ "do_validate" == "0" ]; then
        echo "[WARNING] --max-rb-attempts was not used, so setting to default of $max_rb_attempts"
    fi
fi

function addto_clients_servers() {
    local arg="$1"; shift
    local val="$1"; shift
    for ids in `echo $val | sed -e 's/+/ /g'`; do
        if echo $ids | grep -q -- "-"; then
            range=`echo $ids | sed 's/-/ /'`
            for j in `seq $range`; do
                if [ "$arg" == "clients" -o "$arg" == "client" ]; then
                    clients[$j]="client-$j"
                    let num_clients=$num_clients+1
                elif [ "$arg" == "servers" -o "$arg" == "server" ]; then
                    servers[$j]="server-$j"
                    let num_servers=$num_servers+1
                fi
            done
        else
            if [ "$arg" == "clients" -o "$arg" == "client" ]; then
                clients[$ids]="client-$ids"
                let num_clients=$num_clients+1
            elif [ "$arg" == "servers" -o "$arg" == "server" ]; then
                servers[$ids]="server-$ids"
                let num_servers=$num_servers+1
            fi
        fi
    done
}

function echo_clients_servers() {
    if [ $num_clients -gt 0 ]; then
        echo "client ${!clients[@]}"
    fi
    if [ $num_servers -gt 0 ]; then
        echo "server ${!servers[@]}"
    fi
}

function init_common_dirs() {
    if [ "$do_validate" != 1 ]; then
        config_dir="$base_run_dir/config"
        client_server_config_dir="$config_dir/client-server"
        client_server_bench_cmds_dir="$client_server_config_dir/bench-cmds"
        run_dir="$base_run_dir/run"
        client_server_logs_dir="$run_dir/client-server/logs"
        endpoint_run_dir="$run_dir/endpoint/$endpoint_label"
        bootstrap_script="/usr/local/bin/bootstrap"
        client_server_run_script="/usr/local/bin/client-server-script"
        roadblock_msgs_dir="$endpoint_run_dir/roadblock-msgs"
        mkdir -p "$endpoint_run_dir"
        mkdir -p "$client_server_logs_dir"
        mkdir -p "$roadblock_msgs_dir"
    fi
}

function base_req_check() {
    if [ -z "$rb_passwd" -o -z "$rb_id" ]; then
        echo "Not using roadblock to synchronize since some or all options were missing"
        use_rb=0
        cs_rb_opts=""
        rb_do_exit=0
        if [ ${#clients[@]} -gt 1 ]; then
            echo "Refusing to run because roadblock is not being used and number of clients is > 1"
            rb_do_exit=1
        fi
        if [ ${#servers[@]} -gt 0 ]; then
            echo "Refusing to run because roadblock is not being used and servers are used"
            rb_do_exit=1
        fi
        if [ "$rb_do_exit" == "1" ]; then
            exit_error "Exiting do to roadblock/client/server conflict" endpoint_deploy
        fi
    else
        use_rb=1
    fi
    if [ -z "$run_id" ]; then
        exit_error "The run ID was not provided" endpoint-deploy
    fi
    if [ -z "$base_run_dir" ]; then
        exit_error "--base-run-dir was not provided" endpoint-deploy
    fi
    if [ ! -d "$base_run_dir" ]; then
        exit_error "The run directory [$base_run_dir] does not exist" endpoint-deploy
    fi
    if [ ! -e "$config_dir/rickshaw_id.rsa" ]; then
        exit_error "Could not find $config_dir/rickshaw_id.rsa" endpoint-deploy
    fi
    if [ ! -e "$client_server_bench_cmds_dir/client/1" ]; then
        exit_error "client bench cmd file $client_server_bench_cmds_dir/client/1 not found" endpoint-deploy
    fi
}

function do_roadblock() {
    echo "do_roadblock() ARGC: $#"
    local label=$1; shift
    local role=$1; shift
    local timeout=$1; shift
    if [ $# -gt 0 ]; then
        local message="$1"; shift # A file for user-messages or "" if none
        echo "pwd: `/bin/pwd`"
        echo "Going to send this user message file: $message"
    else
        local message=""
        echo "Not going to send user message file"
    fi
    ###  followers or members remain in $@  ###
    if [ -z "$role" ]; then
        exit_error "do_roadblock(): role not defined"
    fi
    if [ $use_rb -eq 0 ]; then
        echo "Not running roadblock"
        return 0
    fi

    printf "\n\n"
    echo "Starting roadblock [`date`]"
    echo "role: $role"
    local uuid="$rb_id:$label"
    echo "uuid (without attempt ID embedded): $uuid"
    echo "timeout: $timeout"
    abort_opt=""
    if [ "$timeout" == "abort" ]; then
        timeout="90"
        echo "Going to send abort signal"
        abort_opt=" --abort"
    fi
    local msgs_file="$roadblock_msgs_dir/$label.json"
    local cmd="/usr/local/bin/roadblock.py"
    cmd+=" --redis-server localhost --timeout $timeout --redis-password $rb_passwd --role=$role --message-log=$msgs_file $abort_opt"
    if [ ! -z "$message" ]; then
        cmd+=" --user-message $message"
    fi
    if [ "$role" == "follower" ]; then
        cmd+=" --leader-id controller --follower-id $endpoint_label"
    elif [ "$role" == "leader" ]; then
        if [ -z "$1" ]; then
            exit_error "do_roadblock(): follower(s) not defined"
        fi
        cmd+=" --leader-id endpoint"
        local followers=""
        while [ $# -gt 0 ]; do
            cmd+=" --followers $1"
            followers+=" $1"
            shift
        done
        echo "followers: $followers"
    else
        exit_error "Roadblock role \"$role\" invalid"
    fi

    local attempts=0
    local rc=99
    local output=""
    while [ $attempts -lt $max_rb_attempts -a $rc -ne $rb_exit_success -a $rc -ne $rb_exit_abort ]; do
        let attempts=$attempts+1
        echo "attempt number: $attempts"
        echo "uuid: $attempts:$uuid"
        local rb_cmd="$cmd --uuid $attempts:$uuid"
        echo "going to run this roadblock command: ${rb_cmd}"
        echo "roadblock output BEGIN"
        ${rb_cmd}
        rc=$?
        echo "roadblock output END"
        echo "roadblock exit code: $rc"
        if [ -f ${msgs_file} ]; then
            echo "messages from roadblock:"
            cat ${msgs_file}
        fi
    done
    echo "total attempts: $attempts"
    echo "Completed roadblock [`date`]"
    printf "\n\n"
    if [ $rc -ne $rb_exit_success -a $rc -ne $rb_exit_abort ]; then
        exit_error "roadblock failed"
    else
        return $rc
    fi
}

function process_prebench_roadblocks() {
    do_roadblock "endpoint-deploy" "follower" $endpoint_deploy_timeout
    if [ $? -eq $rb_exit_abort ]; then
        exit_error "Exiting due to abort from another participant"
    fi
    do_roadblock "client-server-script-start" "follower" $client_server_script_start_timeout
    if [ $? -eq $rb_exit_abort ]; then
        exit_error "Exiting due to abort from another participant"
    fi
    do_roadblock "client-server-get-data" "follower" $default_timeout
    if [ $? -eq $rb_exit_abort ]; then
        exit_error "Exiting due to abort from another participant"
    fi
    do_roadblock "client-server-collect-sysinfo" "follower" $default_timeout
    if [ $? -eq $rb_exit_abort ]; then
        exit_error "Exiting due to abort from another participant"
    fi
    do_roadblock "client-server-start-tools" "follower" $default_timeout
    if [ $? -eq $rb_exit_abort ]; then
        exit_error "Exiting due to abort from another participant"
    fi
    do_roadblock "client-server-start-tests" "follower" $default_timeout
    if [ $? -eq $rb_exit_abort ]; then
        exit_error "Exiting due to abort from another participant"
    fi
}

function process_bench_roadblocks() {
    local endpoint_type=""
    if [ $# -gt 0 ]; then
        endpoint_type=$1; shift
    fi
    local abort=0
    if [ $# -gt 0 ]; then
        abort=$1; shift
    fi
    local timeout=$default_timeout
    local quit=0
    abort_run_on_iter_fail=0
    while read -u 9 line; do
        iter_samp=`echo $line | awk '{print $1}'`
        iter=`echo $iter_samp | awk -F- '{print $1}'`
        let iter_idx=$iter-1
        sample_failures[$iter_idx]=0
    done 9< "$client_server_bench_cmds_dir/client/1/start"
    while read -u 9 line; do
        if [ $quit -gt 0 ]; then
            echo "quit = 1, so breaking out of tests"
            break
        fi
        iter_samp=`echo $line | awk '{print $1}'`
        iter=`echo $iter_samp | awk -F- '{print $1}'`
        let iter_idx=$iter-1
        samp=`echo $iter_samp | awk -F- '{print $2}'`
        iter_samp_dir="$endpoint_run_dir/iteration-$iter/sample-$samp"
        cs_msgs_dir="$iter_samp_dir/msgs"
        cs_tx_msgs_dir="$cs_msgs_dir/tx" # Messages a client, server, or endpoint wants to transmit
        cs_rx_msgs_dir="$cs_msgs_dir/rx" # Messages a client, server, or endpoint has received
        for this_dir in "$iter_samp_dir" "$cs_msgs_dir" "$cs_tx_msgs_dir" "$cs_rx_msgs_dir"; do
            echo "mkdir -p $this_dir"
            mkdir -p "$this_dir" || exit_error "Could not mkdir $this_dir"
        done
        this_attempt_num=1
        sample_complete=0
        while [ $sample_complete -eq 0 -a ${sample_failures[$iter_idx]} -lt $max_sample_failures ]; do
            this_attempt_fail=0
            printf "Sample %d attempt number %d\n" $samp $this_attempt_num
            msgs_json_file=""
            syncs=""
            stop_syncs=""
            for start_stop in "start" "stop"; do
                if [ "$start_stop" == "start" ]; then
                    syncs="infra server endpoint client"
                else
                    syncs="$stop_syncs"
                fi
                for sync in $syncs; do
                    this_sync="$sync-$start_stop"
                    if [ "$start_stop" == "start" ]; then
                        # Build the syncs needed for stop, may end up being fewer than all syncs if start syncs abort early
                        stop_syncs="$sync $stop_syncs"
                    fi
                    local test_id="$iter-$samp-$this_attempt_num"
                    local label="$test_id:$this_sync"
                    local msgs_file="$roadblock_msgs_dir/$label.json"
                    if [ $abort -eq 0 ]; then
                        do_roadblock "$label" "follower" $timeout "$msgs_json_file"
                    else # This would come from process_roadblocks having an abort on start-tests
                        do_roadblock "$label" "follower" "abort" "$msgs_json_file"
                    fi
                    rb_rc=$?
                    echo "roadblock $label exit code: $rb_rc"
                    if [ $rb_rc -eq $rb_exit_abort ]; then
                        this_attempt_fail=1
                        let sample_failures[$iter_idx]=${sample_failures[$iter_idx]}+1
                        echo -e "\nAbort exit code from iteration $iter, sample $samp"
                        if [ ${sample_failures[$iter_idx]} -ge $max_sample_failures ]; then
                            sample_complete=1
                            printf "[ERROR]All A maximum of %d failures for iteration %d have been reached, failing this iteration\n" \
                                $max_sample_failures $iter
                        fi
                        if [ $abort_run_on_iter_fail -eq 1 ]; then
                            printf "[ERROR]Since this interation failed, skipping all other tests\n"
                            quit=1
                        fi
                        if [ "$start_stop" == "start" ]; then
                            # There is no reason to continue the rest of the start syncs
                            break
                        fi
                    else
                        # Allow to break out of inner while loop if no aborts all the way to the last sync
                        if [ $this_attempt_fail -eq 0 ]; then
                            if [ "$this_sync" == "server-stop" ]; then 
                                sample_complete=1
                                let num_fail=$this_attempt_num-1
                                printf "Sample %d completed successfully with %d failed attempts (%d total sample failures for this iteration)\n" \
                                    $samp $num_fail ${sample_failures[$iter_idx]}
                            fi
                        fi
                    fi
                    # Below checks for a specific timeout message from the benchmark client, and all endpoints
                    # process this the same way
                    timeout=$default_timeout
                    if [ -f $msgs_file ]; then
                        next_timeout=`jq -r '.received[] | .payload.message."user-object".timeout ' $msgs_file | grep -v null`
                        if [ ! -z "$next_timeout" ]; then
                            echo "Applying timeout value of $next_timeout to next roadblock sync"
                            timeout=$next_timeout
                        fi
                    fi
                # The following is organizing any received messages into the $cs_rx_msgs_dir, in case any
                # specific endpoint wants to read them (via endpoint_${endpoint_type}_test_start() further below)
                if [ -f $msgs_file ]; then
                        count=1
                        echo "Found messages file: $msgs_file"
                        jq -cr '.received[] | select(.payload.message.command == "user-object") | .payload.message' $msgs_file\
                        | while read line; do
                            msg="$this_sync:$count"
                            echo "Found user-object message: $line"
                            echo "$line" | jq '."user-object"' >"$cs_rx_msgs_dir/$msg"
                            let count=$count+1
                        done
                    fi
                    # This is the opportunity for the endpoints to make any changes
                    # before the actual test starts (client-start).  For example, this
                    # may be used to provide a route to a benchmark-server.  The endpoint
                    # may also create a message to be sent to other participants on
                    # on the next roadblock.
                    if [ ! -z "$endpoint_type" -a "$this_sync" == "endpoint-start" ]; then
                        echo "about to call endpoint_${endpoint_type}_test_start"
                    endpoint_${endpoint_type}_test_start "$roadblock_msgs_dir" "$test_id" "$cs_tx_msgs_dir"
                        echo "returning from endpoint_${endpoint_type}_test_start"
                    fi
                    if [ ! -z "$endpoint_type" -a "$this_sync" == "endpoint-stop" ]; then
                    echo "Attempting to call endpoint_${endpoint_type}_test_stop"
                    endpoint_${endpoint_type}_test_stop "$roadblock_msgs_dir" "$test_id"
                    fi
                    # Check for any messages to send, typically from endpoint_${endpoint_type}_test_start()
                    pending_tx_msgs="`/bin/ls -1 $cs_tx_msgs_dir`"
                    if [ ! -z "$pending_tx_msgs" ]; then
                        echo "Found messages in $cs_tx_msgs_dir, preparing them to send"
                        mkdir -p ${cs_tx_msgs_dir}-sent
                        msgs_json_file="$iter_samp_dir/rb-msgs-$this_sync"
                        echo "[" >"$msgs_json_file"
                        for msg in $pending_tx_msgs; do
                            # TODO validate JSON schema
                            echo "Adding $msg to $msgs_json_file"
                            cat "$cs_tx_msgs_dir/$msg" >>"$msgs_json_file"
                            /bin/mv "$cs_tx_msgs_dir/$msg" "${cs_tx_msgs_dir}-sent"
                            echo "," >>"$msgs_json_file"
                        done
                        echo '{"recipient":{"type":"all","id":"all"},"user-object":{"sync":"'$this_sync'"}}]' >>$msgs_json_file
                        echo "full message to send:"
                        cat "$msgs_json_file"
                    else
                        msgs_json_file=""
                    fi
                done #for
            done #for
            let this_attempt_num=$this_attempt_num+1
        done #while
    done 9< "$client_server_bench_cmds_dir/client/1/start"
    # Process the first client's bench-commands to participate in the roadblocks
    # What the start or stop command is not important; we just need to know
    # the number of tests in the right order
}

function process_roadblocks() {
    local endpoint_type=$1; shift
    local new_followers="$@"
    local msg_file=""
    if [ ! -z "$new_followers" ]; then
        echo "pwd: `/bin/pwd`"
        msg_file="$endpoint_run_dir/new-followers.json"
        echo "new_followers: $new_followers"
        echo '[{"recipient":{"type":"all","id":"all"},"user-object":{"new-followers":[' >$msg_file
        echo $new_followers | sed  -re 's/^\s+//' -re 's/\s+$//' -re 's/\s+/,/g' -re 's/([^,]+)/"\1"/g' >>$msg_file
        echo ']}}]' >>$msg_file
        echo "ls: `/bin/ls`"
    fi
    if [ $abort -eq 0 ]; then
        do_roadblock "endpoint-deploy" "follower" $endpoint_deploy_timeout $msg_file
        d_rc=$?
        echo "endpoint-deploy complete"
        if [ $abort -eq 0 -a $d_rc -eq 0 ]; then
            echo "going to process endpoint syncs"
            abort_tests_opt=0
            no_bench=0
            client_abort_sync=""
            collector_abort_sync=""
            collector_stop_syncs=()
            client_server_stop_syncs=()
            start_syncs=("script-start" "get-data" "collect-sysinfo" "start-tools" "start-tests")
            for (( i=0; i<${#start_syncs[*]}; i++ )); do
                a_rb=0
                b_rb=0
                this_sync="${start_syncs[$i]}"
                stop_sync=""
                echo "this_sync: $this_sync"
                # collect-sysinfo does not require a stop sync
                if [ "$this_sync" != "collect-sysinfo" ]; then
                    stop_sync="`echo $this_sync | sed -e s/start/stop/ -e s/get/send/`"
                    echo "stop_sync: $stop_sync"
                fi
                if [ "$this_sync" == "script-start" ]; then
                    this_timeout=$client_server_script_start_timeout
                else
                    this_timeout=$default_timeout
                fi
                echo "about to run do_roadblock client-server-$this_sync follower $this_timeout"
                do_roadblock "client-server-$this_sync" "follower" $this_timeout
                b_rb=$?
                echo "rb exit code: $b_rb"
                if [ $a_rb -gt 0 -a $b_rb -gt 0 ]; then
                    # Both aborted, no need to signal the other
                    no_bench=1
                    break
                elif [ $a_rb -gt 0 -a $b_rb -eq 0 ]; then
                    if [ $(($i+1)) -lt ${#start_syncs[*]} ]; then
                        echo "Collector aborted, must signal client-server to abort"
                        client_abort_sync=${start_syncs[$(($i+1))]}
                        # Client-server will advance when sent abort signal
                        client_stop_syncs=("$stop_sync" ${client_stop_syncs[*]})
                        no_bench=1
                    else
                        # There is not another sync before running tests, so signal
                        # process_bench_roadbocks to abort
                        abort_tests_opt=1
                    fi
                    break
                elif [ $a_rb -eq 0 -a $b_rb -gt 0 ]; then
                    echo "Client-server aborted"
                    if [ $# -gt 0 ]; then  # only if we have followers
                        echo "Must signal collector to abort"
                        # If ths is the last sync before running tests, we can't send an abort.
                        # That's OK, as there's nothing left for the collectors to do, as the
                        # abort was from 'test-start'. and collectors do not run tests.
                        if [ $(($i+1)) -lt ${#start_syncs[*]} ]; then
                            collector_abort_sync=${start_syncs[$(($i+1))]}
                            echo "collector_abort_sync; $collector_abort_sync"
                            echo "Collector will advance when sent abort signal"
                            collector_stop_syncs=("$stop_sync" ${collector_stop_syncs[*]})
                        fi
                    fi
                    no_bench=1
                    break
                elif [ $a_rb -eq 0 -a $b_rb -eq 0 ]; then # neither aborted, advance
                    echo "both collector and client-server passed roadblock"
                    if [ "$stop_sync" == "stop-tools" ]; then
                        collector_stop_syncs=("stop-tools" "postprocess-tools" ${collector_stop_syncs[*]})
                        client_stop_syncs=("stop-tools" "postprocess-tools" ${client_stop_syncs[*]})
                    else
                        collector_stop_syncs=("$stop_sync" ${collector_stop_syncs[*]})
                        client_stop_syncs=("$stop_sync" ${client_stop_syncs[*]})
                    fi
                fi
            done
            echo "for loop done, collector_stop_syncs: [ ${collector_stop_syncs[*]} ]  client_stop_syncs: [ ${client_stop_syncs[*]} ]"
            echo "client_abort_sync: $client_abort_sync   collector_abort_sync: $collector_abort_sync"

            if [ $no_bench -eq 0 ]; then
                echo "going to process bench roadblocks"
                process_bench_roadblocks $endpoint_type $abort_tests_opt
            else
                if [ ! -z "$client_abort_sync" ]; then
                    echo "going to signal client-server $client_abort_sync to abort"
                    do_roadblock "client-server-$client_abort_sync" "follower" "abort"
                fi
            fi
            echo "about to process client-server stop syncs"
            for (( i=0; i<${#client_stop_syncs[*]}; i++ )); do
                this_sync="${client_stop_syncs[$i]}"
                if [ "$this_sync" == "postprocess-tools" ]; then
                    this_timeout=$postprocess_tools_timeout
                else
                    this_timeout=$default_timeout
                fi
                do_roadblock "client-server-$this_sync" "follower" $this_timeout
            done
        else
            echo "deploy aborted, going directly to cleanup"
        fi
        if [ ! -z "$endpoint_type" ]; then
            endpoint_${endpoint_type}_cleanup
        fi
        do_roadblock "endpoint-move-data" "follower" $endpoint_deploy_timeout
    fi
    do_roadblock "endpoint-finish" "follower" $endpoint_deploy_timeout
}

function process_final_roadblocks() {
    do_roadblock endpoint-move-data "follower" $endpoint_move_data_timeout
    do_roadblock endpoint-finish "follower" $default_timeout
}

function process_postbench_roadblocks() {
    for sub_label in stop-tools send-data script-finish; do
        do_roadblock "client-server-$sub_label" "follower" $default_timeout
    done
}

function is_ip() {
    local ip=$1; shift

    if echo "$ip" | egrep --silent '[[:digit:]]{1,3}\.[[:digit:]]{1,3}\.[[:digit:]]{1,3}\.[[:digit:]]{1,3}'; then
        return 0
    else
        return 1
    fi
}

function get_controller_ip() {
    local host=$1; shift
    if is_ip $host; then
        echo $host
        return
    fi
    local ip=`host $host | grep "has address" | head -1 | awk -F"has address " '{print $2}'`
    # TODO: confirm is valid ipv4 addr

    # Now that we have the remote IP, figure out what IP this remote
    # host will need to use to contact the controller
    local controller_ipaddr=`ip route get $ip | head -1 | awk -F"src " '{print $2}' | awk '{print $1}'`
    echo $controller_ipaddr
}
