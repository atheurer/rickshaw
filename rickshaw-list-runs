#!/usr/bin/perl
# -*- mode: perl; indent-tabs-mode: t; perl-indent-level: 4 -*-
# vim: autoindent tabstop=4 shiftwidth=4 expandtab softtabstop=4 filetype=perl
#
# Author: Andrew Theurer

use strict;
use warnings;
use Cwd;
use Data::UUID;
use File::pushd;
use File::Basename;
use File::Temp qw(tempdir);
use File::Copy;
use File::Path qw(make_path);
use JSON::XS;
use JSON::Validator;
use Data::Dumper;
use REST::Client;

my $debug = 0;
my %result;
my $base_run_dir;
my %cdm = ( 'ver' => 'v5dev' );
my $coder = JSON::XS->new->canonical;

sub usage {
    print "\nusage:\n\n";
    print "--base-run-dir <dir>  (this is a result-file in json that rickshaw-post-process generates)\n";
}

sub debug_log {
    if ($debug) {
        print "[DEBUG]" . shift;
    }
}

sub put_json_file {
    my $filename = shift;
    my $json_ref = shift;
    my $schema_filename = shift;
    my $coder = JSON::XS->new->canonical->pretty;
    if (defined $schema_filename and -e $schema_filename) {
        my $jv = JSON::Validator->new;
        open(FH, $schema_filename) or die "Could not open $schema_filename";
        my $json_text;
        while ( <FH> ) {
            $json_text .= $_;
        }
        close FH;
        chomp $json_text;
        $jv->schema($json_text);
        debug_log(sprintf "Going to validate schema with [%s]\n", $schema_filename);
        my @errors = $jv->validate($json_ref);
        if (scalar @errors >  0) {
            printf "Validation errors for file %s with schema %s:\n" . Dumper \@errors,
                   $filename, $schema_filename;
            exit 1;
        }
    }
    debug_log(sprintf "trying to write [%s]\n", $filename);
    my $json_text = $coder->encode($json_ref);
    open(JSON_FH, ">" . $filename) || die("Could not open file $filename\n");
    printf JSON_FH "%s", $json_text;
    close JSON_FH;
}

sub get_json_file {
    my $filename = shift;
    my $schema_filename = shift;
    my $coder = JSON::XS->new;
    debug_log(sprintf "trying to open [%s]\n", $filename);
    open(FH, $filename) || die("Could not open file $filename\n");
    my $json_text = "";
    while ( <FH> ) {
        $json_text .= $_;
    }
    close FH;
    my $json_ref = $coder->decode($json_text) || die "Could not read JSON";
    if (defined $schema_filename and -e $schema_filename) {
        my $jv = JSON::Validator->new;
        open(FH, $schema_filename) or die "Could not open $schema_filename";
        my $json_text;
        while ( <FH> ) {
            $json_text .= $_;
        }
        close FH;
        chomp $json_text;
        $jv->schema($json_text);
        my @errors = $jv->validate($json_ref);
        if (scalar @errors >  0) {
            printf "Validaton errors for file %s with schema %s:\n" . Dumper \@errors,
                   $filename, $schema_filename;
            exit 1;
        }
    }
    return $json_ref;
}

sub http_request {
    my $method = shift;
    my $host = shift;
    my $req = shift;
    my $body = shift;
    my $client = REST::Client->new();
    $client->setHost($host);
    my %req_header = ("Content-Type" => "application/json");
    #debug_log(sprintf "%s:\nRequest: http://%s/%s\nbody: %s\n\n", $desc, $host, $req, $body);
    $client->request($method, $req, $body, \%req_header);
    my $response = $client->responseContent();
    #debug_log($response);
    return $response;
}

sub http_ndjson_request {
    my $method = shift;
    my $host = shift;
    my $req = shift;
    my $body = shift;
    my $client = REST::Client->new();
    $client->setHost($host);
    my %req_header = ("Content-Type" => "application/x-ndjson");
    #debug_log(sprintf "%s:\nRequest: http://%s/%s\nbody: %s\n\n", $desc, $host, $req, $body);
    $client->request($method, $req, $body, \%req_header);
    my $response = $client->responseContent();
    #debug_log($response);
    return $response;
}

# Process the cmdline params
    debug_log(sprintf "processing \@ARGV, param: [%s]\n", $p);
    my $arg;
    my $val;

    if ( $p =~ /^\-\-(\S+)/ ) {
        $arg = $1;
        if ( $arg =~ /^(\S+)=(.*)/ ) { # '--arg=val'
            $arg = $1;
            $val = $2;
        } else { # '--arg val'
            $val = shift @ARGV;
        }
    } else {
        print "[ERROR]malformed cmdline parameter: %s\n";
        usage;
        exit 1;
    }
    debug_log(sprintf "processing \@ARGV, arg is: [%s], val is: [%s]\n", $arg, $val);
    if ($arg =~ /^help$/) {
        usage;
        exit 0;
    } elsif ($arg =~ /^runs-dir$/) {
        debug_log(sprintf "argument: [%s]\n", $arg);
        $runs_dir = $val;
    } elsif ($arg =~ /^--cdmq-dir$/) {
        debug_log(sprintf "argument: [%s]\n", $arg);
        $cdmq_dir = $val;
    } elsif ($arg =~ /^--es$/) {
        debug_log(sprintf "argument: [%s]\n", $arg);
        $es_url = $val;
    } else {
        printf "[ERROR]argument not valid: [%s]\n", $arg;
        usage;
        exit 1;
    }
}

# Ensure the run-dir hase absolute path
{
    my $dir = pushd($base_run_dir);
    debug_log(sprintf "pushd to [%s]\n", $base_run_dir);
    my $cwd = getcwd();
    debug_log(sprintf "cwd [%s]\n", $cwd);
    $base_run_dir = $cwd;
}
my $rickshaw_project_dir; # We need the project dir to load schemas to validate json
{
    # Get the absolute path of the rickshaw project directory
    my $dir = pushd(dirname($0));
    $rickshaw_project_dir = getcwd();
}


